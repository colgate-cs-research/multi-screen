cmake_minimum_required(VERSION 3.25)
project(ffmpeg-dependencies)

set(CMAKE_CXX_STANDARD 20)

set(EP_BASE @EP_BASE@)
set(EP_BUILD_ALWAYS @EP_BUILD_ALWAYS@)
set(EP_J @EP_J@)
set(INSTALL_PREFIX @EP_BASE@/Install)
#set(INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/build)

include(ExternalProject)

set_directory_properties(PROPERTIES EP_BASE @EP_BASE@)

execute_process(
        COMMAND sudo apt-get update -qq
        COMMAND sudo apt-get -y install
        autoconf
        automake
        build-essential
        cmake
        git-core
        libass-dev
        libfreetype6-dev
        libgnutls28-dev
        libmp3lame-dev
        libsdl2-dev
        libtool
        libva-dev
        libvdpau-dev
        libvorbis-dev
        libxcb1-dev
        libxcb-shm0-dev
        libxcb-xfixes0-dev
        meson
        ninja-build
        pkg-config
        texinfo
        wget
        yasm
        zlib1g-dev
        libsrt-gnutls-dev # add srt support
        libunistring-dev # https://askubuntu.com/questions/1252997/unable-to-compile-ffmpeg-on-ubuntu-20-04
)

ExternalProject_Add(
        x264
        GIT_REPOSITORY https://code.videolan.org/videolan/x264.git
        GIT_SHALLOW 1L
        SOURCE_DIR ${CMAKE_SOURCE_DIR}/x264
        INSTALL_DIR ${INSTALL_PREFIX}
        CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env PATH=${INSTALL_PREFIX}/bin:$ENV{PATH} PKG_CONFIG_PATH=${INSTALL_PREFIX}/lib/pkgconfig ${CMAKE_SOURCE_DIR}/x264/configure --prefix=${INSTALL_PREFIX} --enable-static --enable-pic
        BUILD_COMMAND ${CMAKE_COMMAND} -E env PATH=${INSTALL_PREFIX}/bin:$ENV{PATH} make -j @EP_J@
        BUILD_IN_SOURCE 1L
        BUILD_ALWAYS @EP_BUILD_ALWAYS@
        INSTALL_COMMAND make install
)

ExternalProject_Add(
        x265
        URL https://bitbucket.org/multicoreware/x265_git/get/master.tar.bz2
        SOURCE_DIR ${CMAKE_SOURCE_DIR}/x265
        INSTALL_DIR ${INSTALL_PREFIX}
        CONFIGURE_COMMAND
        COMMAND cd ${CMAKE_SOURCE_DIR}/x265/build/linux
        COMMAND ${CMAKE_COMMAND} -E env PATH=${INSTALL_PREFIX}/bin:$ENV{PATH} ${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} -DENABLE_SHARED=off ${CMAKE_SOURCE_DIR}/x265/source
        BUILD_COMMAND
        COMMAND cd ${CMAKE_SOURCE_DIR}/x265/build/linux
        COMMAND ${CMAKE_COMMAND} -E env PATH=${INSTALL_PREFIX}/bin:$ENV{PATH} make -j @EP_J@
        BUILD_IN_SOURCE 1L
        BUILD_ALWAYS @EP_BUILD_ALWAYS@
        INSTALL_COMMAND
        COMMAND cd ${CMAKE_SOURCE_DIR}/x265/build/linux
        COMMAND make install
)

ExternalProject_Add(
        libvpx
        GIT_REPOSITORY https://chromium.googlesource.com/webm/libvpx
        GIT_TAG main
        GIT_SHALLOW 1L
        SOURCE_DIR ${CMAKE_SOURCE_DIR}/libvpx
        INSTALL_DIR ${INSTALL_PREFIX}
        CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env PATH=${INSTALL_PREFIX}/bin:$ENV{PATH} ${CMAKE_SOURCE_DIR}/libvpx/configure --prefix=${INSTALL_PREFIX} --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=yasm
        BUILD_COMMAND ${CMAKE_COMMAND} -E env PATH=${INSTALL_PREFIX}/bin:$ENV{PATH} make -j @EP_J@
        BUILD_IN_SOURCE 1L
        BUILD_ALWAYS @EP_BUILD_ALWAYS@
        INSTALL_COMMAND make install
)

ExternalProject_Add(
        fdk-aac
        GIT_REPOSITORY https://github.com/mstorsjo/fdk-aac
        GIT_SHALLOW 1L
        SOURCE_DIR ${CMAKE_SOURCE_DIR}/fdk-aac
        INSTALL_DIR ${INSTALL_PREFIX}
        CONFIGURE_COMMAND
        COMMAND autoreconf -fiv
        COMMAND ${CMAKE_SOURCE_DIR}/fdk-aac/configure --prefix=${INSTALL_PREFIX} --disable-shared
        BUILD_COMMAND make -j @EP_J@
        BUILD_IN_SOURCE 1L
        BUILD_ALWAYS @EP_BUILD_ALWAYS@
        INSTALL_COMMAND make install
)

ExternalProject_Add(
        opus
        GIT_REPOSITORY https://github.com/xiph/opus.git
        GIT_TAG main
        GIT_SHALLOW 1L
        SOURCE_DIR ${CMAKE_SOURCE_DIR}/opus
        INSTALL_DIR ${INSTALL_PREFIX}
        CONFIGURE_COMMAND
        COMMAND ${CMAKE_SOURCE_DIR}/opus/autogen.sh
        COMMAND ${CMAKE_SOURCE_DIR}/opus/configure --prefix=${INSTALL_PREFIX} --disable-shared
        BUILD_COMMAND make -j @EP_J@
        BUILD_IN_SOURCE 1L
        BUILD_ALWAYS @EP_BUILD_ALWAYS@
        INSTALL_COMMAND make install
)

ExternalProject_Add(
        aom
        GIT_REPOSITORY https://aomedia.googlesource.com/aom
        GIT_TAG main
        GIT_SHALLOW 1L
        SOURCE_DIR ${CMAKE_SOURCE_DIR}/aom
        INSTALL_DIR ${INSTALL_PREFIX}
        CONFIGURE_COMMAND
        COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_SOURCE_DIR}/aom_build
        COMMAND cd ${CMAKE_SOURCE_DIR}/aom_build
        COMMAND ${CMAKE_COMMAND} -E env PATH=${INSTALL_PREFIX}/bin:$ENV{PATH} ${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} -DENABLE_TESTS=OFF -DENABLE_NASM=on ../aom
        BUILD_COMMAND
        COMMAND cd ${CMAKE_SOURCE_DIR}/aom_build
        COMMAND ${CMAKE_COMMAND} -E env PATH=${INSTALL_PREFIX}/bin:$ENV{PATH} make -j @EP_J@
        BUILD_IN_SOURCE 1L
        BUILD_ALWAYS @EP_BUILD_ALWAYS@
        INSTALL_COMMAND
        COMMAND cd ${CMAKE_SOURCE_DIR}/aom_build
        COMMAND make install
)

ExternalProject_Add(
        SVT-AV1
        GIT_REPOSITORY https://gitlab.com/AOMediaCodec/SVT-AV1.git
        SOURCE_DIR ${CMAKE_SOURCE_DIR}/SVT-AV1
        INSTALL_DIR ${INSTALL_PREFIX}
        CONFIGURE_COMMAND
        COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_SOURCE_DIR}/SVT-AV1/build
        COMMAND cd ${CMAKE_SOURCE_DIR}/SVT-AV1/build
        COMMAND ${CMAKE_COMMAND} -E env PATH=${INSTALL_PREFIX}/bin:$ENV{PATH} ${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} -DCMAKE_BUILD_TYPE=Release -DBUILD_DEC=OFF -DBUILD_SHARED_LIBS=OFF ..
        BUILD_COMMAND
        COMMAND cd ${CMAKE_SOURCE_DIR}/SVT-AV1/build
        COMMAND ${CMAKE_COMMAND} -E env PATH=${INSTALL_PREFIX}/bin:$ENV{PATH} make -j @EP_J@
        BUILD_IN_SOURCE 1L
        BUILD_ALWAYS @EP_BUILD_ALWAYS@
        INSTALL_COMMAND
        COMMAND cd ${CMAKE_SOURCE_DIR}/SVT-AV1/build
        COMMAND make install
)

ExternalProject_Add(
        dav1d
        GIT_REPOSITORY https://code.videolan.org/videolan/dav1d.git
        GIT_SHALLOW 1L
        SOURCE_DIR ${CMAKE_SOURCE_DIR}/dav1d
        INSTALL_DIR ${INSTALL_PREFIX}
        CONFIGURE_COMMAND
        COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_SOURCE_DIR}/dav1d/build
        COMMAND cd ${CMAKE_SOURCE_DIR}/dav1d/build
        COMMAND ${CMAKE_COMMAND} -E env PATH=${INSTALL_PREFIX}/bin:$ENV{PATH} meson setup -Denable_tools=false -Denable_tests=false --default-library=static .. --prefix=${INSTALL_PREFIX} --libdir=${INSTALL_PREFIX}/lib
        BUILD_COMMAND
        COMMAND cd ${CMAKE_SOURCE_DIR}/dav1d/build
        COMMAND ${CMAKE_COMMAND} -E env PATH=${INSTALL_PREFIX}/bin:$ENV{PATH} ninja -j @EP_J@
        BUILD_IN_SOURCE 1L
        BUILD_ALWAYS @EP_BUILD_ALWAYS@
        INSTALL_COMMAND
        COMMAND cd ${CMAKE_SOURCE_DIR}/dav1d/build
        COMMAND ninja install
)

ExternalProject_Add(
        vmaf
        URL https://github.com/Netflix/vmaf/archive/v2.3.1.tar.gz
        SOURCE_DIR ${CMAKE_SOURCE_DIR}/vmaf
        INSTALL_DIR ${INSTALL_PREFIX}
        CONFIGURE_COMMAND
        COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_SOURCE_DIR}/vmaf/libvmaf/build
        COMMAND cd ${CMAKE_SOURCE_DIR}/vmaf/libvmaf/build
        COMMAND ${CMAKE_COMMAND} -E env PATH=${INSTALL_PREFIX}/bin:$ENV{PATH} meson setup -Denable_tests=false -Denable_docs=false --buildtype=release --default-library=static .. --prefix=${INSTALL_PREFIX} --bindir=${INSTALL_PREFIX}/bin --libdir=${INSTALL_PREFIX}/lib
        BUILD_COMMAND
        COMMAND cd ${CMAKE_SOURCE_DIR}/vmaf/libvmaf/build
        COMMAND ${CMAKE_COMMAND} -E env PATH=${INSTALL_PREFIX}/bin:$ENV{PATH} ninja -j @EP_J@
        BUILD_IN_SOURCE 1L
        BUILD_ALWAYS @EP_BUILD_ALWAYS@
        INSTALL_COMMAND
        COMMAND cd ${CMAKE_SOURCE_DIR}/vmaf/libvmaf/build
        COMMAND ninja install
)